"""
Forms & Surveys schema - handles custom forms, registrations, surveys, and feedback
"""
enum FormFieldType {
  TEXT
  TEXT_AREA
  EMAIL
  PHONE
  NUMBER
  DATE
  TIME
  DATE_TIME
  CHECKBOX
  RADIO
  SELECT
  MULTI_SELECT
  FILE
  IMAGE
  SIGNATURE
  ADDRESS
  NAME
  HEADING
  PARAGRAPH
  DIVIDER
  HIDDEN
  CONSENT
}

enum FormStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  INACTIVE
  EXPIRED
}

enum FormVisibility {
  PUBLIC
  MEMBERS_ONLY
  SPECIFIC_GROUPS
  INVITATION_ONLY
  PASSWORD_PROTECTED
}

enum FormSubmissionStatus {
  COMPLETE
  INCOMPLETE
  NEEDS_REVIEW
  APPROVED
  REJECTED
}

enum ConditionOperator {
  EQUALS
  NOT_EQUALS
  CONTAINS
  NOT_CONTAINS
  GREATER_THAN
  LESS_THAN
  STARTS_WITH
  ENDS_WITH
  IS_EMPTY
  IS_NOT_EMPTY
}

type Form {
  id: ID!
  title: String!
  description: String
  status: FormStatus!
  visibility: FormVisibility!
  fields: [FormField!]!
  sections: [FormSection!]
  startDate: DateTime
  endDate: DateTime
  submissionCount: Int!
  redirectUrl: String
  successMessage: String
  enableSaveProgress: Boolean!
  allowMultipleSubmissions: Boolean!
  requireAuthentication: Boolean!
  showProgressBar: Boolean!
  autoNumbering: Boolean!
  branch: Branch
  ministry: Ministry
  smallGroup: Group
  createdBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
  isTemplate: Boolean!
  tags: [String!]
  visibilitySettings: JSON
  notificationSettings: JSON
  styles: JSON
}

type FormSection {
  id: ID!
  form: Form!
  title: String!
  description: String
  order: Int!
  isVisible: Boolean!
  conditionalDisplay: [FormCondition!]
  fields: [FormField!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FormField {
  id: ID!
  form: Form!
  section: FormSection
  label: String!
  fieldType: FormFieldType!
  key: String!
  placeholder: String
  helpText: String
  defaultValue: JSON
  options: [FormFieldOption!]
  isRequired: Boolean!
  isReadOnly: Boolean!
  validations: [FormFieldValidation!]
  order: Int!
  isVisible: Boolean!
  conditionalDisplay: [FormCondition!]
  properties: JSON
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FormFieldOption {
  id: ID!
  label: String!
  value: String!
  order: Int!
  isDefault: Boolean!
}

type FormFieldValidation {
  id: ID!
  type: String!
  value: JSON
  message: String!
}

type FormCondition {
  id: ID!
  sourceFieldKey: String!
  operator: ConditionOperator!
  value: JSON!
  isEnabled: Boolean!
}

type FormSubmission {
  id: ID!
  form: Form!
  submitter: Member
  submittedBy: User!
  submittedAt: DateTime!
  status: FormSubmissionStatus!
  answers: [FormAnswer!]!
  ipAddress: String
  deviceInfo: String
  completionTime: Int
  reviewedBy: User
  reviewedAt: DateTime
  reviewNotes: String
  branch: Branch
  metadata: JSON
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FormAnswer {
  id: ID!
  submission: FormSubmission!
  field: FormField!
  value: JSON
  fileUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Survey {
  id: ID!
  title: String!
  description: String
  form: Form!
  audience: JSON
  respondentCount: Int!
  anonymousResponses: Boolean!
  isPublished: Boolean!
  startDate: DateTime!
  endDate: DateTime
  branch: Branch
  ministry: Ministry
  smallGroup: Group
  createdBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SurveyAnalytics {
  id: ID!
  survey: Survey!
  responseRate: Float!
  completionRate: Float!
  averageCompletionTime: Int!
  questionAnalytics: [QuestionAnalytics!]!
  demographics: JSON
  createdAt: DateTime!
  updatedAt: DateTime!
}

type QuestionAnalytics {
  fieldKey: String!
  fieldLabel: String!
  fieldType: FormFieldType!
  responseCount: Int!
  distribution: JSON!
}

type FormTemplate {
  id: ID!
  title: String!
  description: String
  category: String!
  form: Form!
  isGlobal: Boolean!
  branch: Branch
  usageCount: Int!
  createdBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FormInvitation {
  id: ID!
  form: Form!
  email: String
  member: Member
  invitedBy: User!
  invitedAt: DateTime!
  expiresAt: DateTime
  token: String!
  lastSentAt: DateTime
  wasOpened: Boolean!
  openedAt: DateTime
  wasCompleted: Boolean!
  completedAt: DateTime
  submission: FormSubmission
  createdAt: DateTime!
  updatedAt: DateTime!
}

extend type Query {
  # Get forms with filtering
  forms(
    search: String
    status: FormStatus
    visibility: FormVisibility
    isTemplate: Boolean
    branchId: ID
    ministryId: ID
    groupId: ID
    tags: [String!]
    createdById: ID
    dateRange: DateRangeInput
    pagination: PaginationInput
  ): FormConnection! @auth(requires: [STAFF])

  # Get a specific form
  form(id: ID!): Form @auth(requires: [STAFF])

  # Get form for submission (public access possible)
  formForSubmission(id: ID!, token: String): Form

  # Get form sections
  formSections(
    formId: ID!
    pagination: PaginationInput
  ): FormSectionConnection! @auth(requires: [STAFF])

  # Get form fields for a section or entire form
  formFields(
    formId: ID!
    sectionId: ID
    pagination: PaginationInput
  ): FormFieldConnection! @auth(requires: [STAFF])

  # Get form submissions
  formSubmissions(
    formId: ID!
    status: FormSubmissionStatus
    dateRange: DateRangeInput
    memberId: ID
    branchId: ID
    pagination: PaginationInput
  ): FormSubmissionConnection! @auth(requires: [STAFF])

  # Get a specific form submission
  formSubmission(id: ID!): FormSubmission @auth(requires: [STAFF])

  # Get my form submissions
  myFormSubmissions(
    formId: ID
    status: FormSubmissionStatus
    pagination: PaginationInput
  ): FormSubmissionConnection! @auth(requires: [MEMBER])

  # Get surveys
  surveys(
    search: String
    isPublished: Boolean
    dateRange: DateRangeInput
    branchId: ID
    ministryId: ID
    groupId: ID
    pagination: PaginationInput
  ): SurveyConnection! @auth(requires: [STAFF])

  # Get a specific survey
  survey(id: ID!): Survey @auth(requires: [STAFF])

  # Get survey analytics
  surveyAnalytics(surveyId: ID!): SurveyAnalytics! @auth(requires: [STAFF])

  # Get form templates
  formTemplates(
    search: String
    category: String
    isGlobal: Boolean
    branchId: ID
    pagination: PaginationInput
  ): FormTemplateConnection! @auth(requires: [STAFF])

  # Get a specific form template
  formTemplate(id: ID!): FormTemplate @auth(requires: [STAFF])

  # Get form invitations
  formInvitations(
    formId: ID!
    wasCompleted: Boolean
    expiresAfter: DateTime
    pagination: PaginationInput
  ): FormInvitationConnection! @auth(requires: [STAFF])

  # Validate form invitation token
  validateFormInvitation(token: String!): FormInvitation

  # Get form submission answers
  formSubmissionAnswers(
    submissionId: ID!
    pagination: PaginationInput
  ): FormAnswerConnection! @auth(requires: [STAFF])
}

type FormConnection {
  edges: [FormEdge!]!
  pageInfo: PaginationInfo!
}

type FormEdge {
  node: Form!
  cursor: String!
}

type FormSectionConnection {
  edges: [FormSectionEdge!]!
  pageInfo: PaginationInfo!
}

type FormSectionEdge {
  node: FormSection!
  cursor: String!
}

type FormFieldConnection {
  edges: [FormFieldEdge!]!
  pageInfo: PaginationInfo!
}

type FormFieldEdge {
  node: FormField!
  cursor: String!
}

type FormSubmissionConnection {
  edges: [FormSubmissionEdge!]!
  pageInfo: PaginationInfo!
}

type FormSubmissionEdge {
  node: FormSubmission!
  cursor: String!
}

type SurveyConnection {
  edges: [SurveyEdge!]!
  pageInfo: PaginationInfo!
}

type SurveyEdge {
  node: Survey!
  cursor: String!
}

type FormTemplateConnection {
  edges: [FormTemplateEdge!]!
  pageInfo: PaginationInfo!
}

type FormTemplateEdge {
  node: FormTemplate!
  cursor: String!
}

type FormInvitationConnection {
  edges: [FormInvitationEdge!]!
  pageInfo: PaginationInfo!
}

type FormInvitationEdge {
  node: FormInvitation!
  cursor: String!
}

type FormAnswerConnection {
  edges: [FormAnswerEdge!]!
  pageInfo: PaginationInfo!
}

type FormAnswerEdge {
  node: FormAnswer!
  cursor: String!
}

extend type Mutation {
  # Create a form
  createForm(input: CreateFormInput!): Form! @auth(requires: [STAFF])

  # Update a form
  updateForm(id: ID!, input: UpdateFormInput!): Form! @auth(requires: [STAFF])

  # Delete a form
  deleteForm(id: ID!): Boolean! @auth(requires: [STAFF])

  # Duplicate a form
  duplicateForm(id: ID!, newTitle: String!): Form! @auth(requires: [STAFF])

  # Change form status
  changeFormStatus(id: ID!, status: FormStatus!): Form! @auth(requires: [STAFF])

  # Create a form section
  createFormSection(input: CreateFormSectionInput!): FormSection!
    @auth(requires: [STAFF])

  # Update a form section
  updateFormSection(id: ID!, input: UpdateFormSectionInput!): FormSection!
    @auth(requires: [STAFF])

  # Delete a form section
  deleteFormSection(id: ID!): Boolean! @auth(requires: [STAFF])

  # Reorder form sections
  reorderFormSections(formId: ID!, sectionIds: [ID!]!): [FormSection!]!
    @auth(requires: [STAFF])

  # Create a form field
  createFormField(input: CreateFormFieldInput!): FormField!
    @auth(requires: [STAFF])

  # Update a form field
  updateFormField(id: ID!, input: UpdateFormFieldInput!): FormField!
    @auth(requires: [STAFF])

  # Delete a form field
  deleteFormField(id: ID!): Boolean! @auth(requires: [STAFF])

  # Reorder form fields
  reorderFormFields(sectionId: ID!, fieldIds: [ID!]!): [FormField!]!
    @auth(requires: [STAFF])

  # Submit a form
  submitForm(input: SubmitFormInput!): FormSubmission!

  # Save form progress
  saveFormProgress(input: SaveFormProgressInput!): FormSubmission!
    @auth(requires: [MEMBER])

  # Review form submission
  reviewFormSubmission(
    id: ID!
    input: ReviewFormSubmissionInput!
  ): FormSubmission! @auth(requires: [STAFF])

  # Create a survey
  createSurvey(input: CreateSurveyInput!): Survey! @auth(requires: [STAFF])

  # Update a survey
  updateSurvey(id: ID!, input: UpdateSurveyInput!): Survey!
    @auth(requires: [STAFF])

  # Delete a survey
  deleteSurvey(id: ID!): Boolean! @auth(requires: [STAFF])

  # Publish a survey
  publishSurvey(id: ID!): Survey! @auth(requires: [STAFF])

  # Close a survey
  closeSurvey(id: ID!): Survey! @auth(requires: [STAFF])

  # Create a form template
  createFormTemplate(input: CreateFormTemplateInput!): FormTemplate!
    @auth(requires: [STAFF])

  # Update a form template
  updateFormTemplate(id: ID!, input: UpdateFormTemplateInput!): FormTemplate!
    @auth(requires: [STAFF])

  # Delete a form template
  deleteFormTemplate(id: ID!): Boolean! @auth(requires: [STAFF])

  # Create a form from template
  createFormFromTemplate(
    templateId: ID!
    input: CreateFormFromTemplateInput!
  ): Form! @auth(requires: [STAFF])

  # Send form invitations
  sendFormInvitations(input: SendFormInvitationsInput!): [FormInvitation!]!
    @auth(requires: [STAFF])

  # Resend form invitation
  resendFormInvitation(id: ID!): FormInvitation! @auth(requires: [STAFF])

  # Cancel form invitation
  cancelFormInvitation(id: ID!): Boolean! @auth(requires: [STAFF])

  # Bulk cancel form invitations
  bulkCancelFormInvitations(ids: [ID!]!): Boolean! @auth(requires: [STAFF])

  # Export form submissions
  exportFormSubmissions(formId: ID!, format: String!): String!
    @auth(requires: [STAFF])
}

input CreateFormInput {
  title: String!
  description: String
  status: FormStatus!
  visibility: FormVisibility!
  startDate: DateTime
  endDate: DateTime
  redirectUrl: String
  successMessage: String
  enableSaveProgress: Boolean!
  allowMultipleSubmissions: Boolean!
  requireAuthentication: Boolean!
  showProgressBar: Boolean!
  autoNumbering: Boolean!
  branchId: ID
  ministryId: ID
  groupId: ID
  isTemplate: Boolean
  tags: [String!]
  visibilitySettings: JSON
  notificationSettings: JSON
  styles: JSON
}

input UpdateFormInput {
  title: String
  description: String
  status: FormStatus
  visibility: FormVisibility
  startDate: DateTime
  endDate: DateTime
  redirectUrl: String
  successMessage: String
  enableSaveProgress: Boolean
  allowMultipleSubmissions: Boolean
  requireAuthentication: Boolean
  showProgressBar: Boolean
  autoNumbering: Boolean
  branchId: ID
  ministryId: ID
  groupId: ID
  isTemplate: Boolean
  tags: [String!]
  visibilitySettings: JSON
  notificationSettings: JSON
  styles: JSON
}

input CreateFormSectionInput {
  formId: ID!
  title: String!
  description: String
  order: Int!
  isVisible: Boolean!
  conditionalDisplay: [FormConditionInput!]
}

input UpdateFormSectionInput {
  title: String
  description: String
  order: Int
  isVisible: Boolean
  conditionalDisplay: [FormConditionInput!]
}

input CreateFormFieldInput {
  formId: ID!
  sectionId: ID
  label: String!
  fieldType: FormFieldType!
  key: String!
  placeholder: String
  helpText: String
  defaultValue: JSON
  options: [FormFieldOptionInput!]
  isRequired: Boolean!
  isReadOnly: Boolean!
  validations: [FormFieldValidationInput!]
  order: Int!
  isVisible: Boolean!
  conditionalDisplay: [FormConditionInput!]
  properties: JSON
}

input UpdateFormFieldInput {
  label: String
  fieldType: FormFieldType
  placeholder: String
  helpText: String
  defaultValue: JSON
  options: [FormFieldOptionInput!]
  isRequired: Boolean
  isReadOnly: Boolean
  validations: [FormFieldValidationInput!]
  order: Int
  isVisible: Boolean
  conditionalDisplay: [FormConditionInput!]
  properties: JSON
}

input FormFieldOptionInput {
  label: String!
  value: String!
  order: Int!
  isDefault: Boolean!
}

input FormFieldValidationInput {
  type: String!
  value: JSON
  message: String!
}

input FormConditionInput {
  sourceFieldKey: String!
  operator: ConditionOperator!
  value: JSON!
  isEnabled: Boolean!
}

input FormAnswerInput {
  fieldKey: String!
  value: JSON
  fileUrl: String
}

input SubmitFormInput {
  formId: ID!
  answers: [FormAnswerInput!]!
  token: String
  metadata: JSON
}

input SaveFormProgressInput {
  formId: ID!
  answers: [FormAnswerInput!]!
  metadata: JSON
}

input ReviewFormSubmissionInput {
  status: FormSubmissionStatus!
  reviewNotes: String
}

input CreateSurveyInput {
  title: String!
  description: String
  formId: ID!
  audience: JSON
  anonymousResponses: Boolean!
  isPublished: Boolean!
  startDate: DateTime!
  endDate: DateTime
  branchId: ID
  ministryId: ID
  groupId: ID
}

input UpdateSurveyInput {
  title: String
  description: String
  audience: JSON
  anonymousResponses: Boolean
  isPublished: Boolean
  startDate: DateTime
  endDate: DateTime
  branchId: ID
  ministryId: ID
  groupId: ID
}

input CreateFormTemplateInput {
  title: String!
  description: String
  category: String!
  formId: ID!
  isGlobal: Boolean!
  branchId: ID
}

input UpdateFormTemplateInput {
  title: String
  description: String
  category: String
  isGlobal: Boolean
  branchId: ID
}

input CreateFormFromTemplateInput {
  title: String!
  description: String
  status: FormStatus!
  branchId: ID
  ministryId: ID
  groupId: ID
}

input SendFormInvitationsInput {
  formId: ID!
  emails: [String!]
  memberIds: [ID!]
  expiresAt: DateTime
  message: String
}

extend type Subscription {
  # Get notified of new form submissions
  formSubmissionCreated(formId: ID!): FormSubmission! @auth(requires: [STAFF])

  # Get notified of form submission reviews
  formSubmissionReviewed(formId: ID!): FormSubmission! @auth(requires: [STAFF])

  # Get notified when a survey is closed
  surveyClosed(id: ID!): Survey! @auth(requires: [STAFF])
}
