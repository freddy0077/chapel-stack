"""
Authentication and User Management schema
"""

enum AuthProvider {
  EMAIL
  GOOGLE
  FACEBOOK
  APPLE
  MICROSOFT
}

enum AuthenticationMethod {
  PASSWORD
  MAGIC_LINK
  OAUTH
  MFA
}

enum MFAType {
  SMS
  EMAIL
  AUTHENTICATOR_APP
}

enum DeviceType {
  DESKTOP
  MOBILE
  TABLET
  OTHER
}

type User {
  id: ID!
  email: String!
  phone: String
  firstName: String!
  lastName: String!
  displayName: String
  avatar: String
  role: Role!
  status: Status!
  isEmailVerified: Boolean!
  isPhoneVerified: Boolean!
  branches: [BranchMember!]!
  primaryBranch: Branch
  lastLogin: DateTime
  lastActive: DateTime
  hasMFA: Boolean!
  mfaTypes: [MFAType!]
  registeredAt: DateTime!
  updatedAt: DateTime!
  activeSessions: [Session!]
  permissions: [Permission!]!
  authProvider: AuthProvider
  customFields: JSON
  metadata: JSON
}

type Session {
  id: ID!
  user: User!
  token: String
  expiresAt: DateTime!
  createdAt: DateTime!
  ipAddress: String
  userAgent: String
  deviceType: DeviceType
  deviceName: String
  location: String
  isActive: Boolean!
  lastActive: DateTime
}

type Permission {
  id: ID!
  name: String!
  description: String
  slug: String!
  resource: String!
  action: String!
  conditions: JSON
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AuthResponse {
  token: String!
  refreshToken: String!
  user: User!
  expiresAt: DateTime!
  sessionId: ID!
  requiresMFA: Boolean!
}

type VerificationResponse {
  success: Boolean!
  message: String!
  expiresAt: DateTime
}

type MFASetupResponse {
  secret: String
  qrCodeUrl: String
  recoveryCodes: [String!]
  success: Boolean!
  message: String
}

# Import directive to extend from base schema
# extend type Query {}

extend type Query {
  # Get current authenticated user
  me: User! @auth(requires: [GUEST])
  
  # Get all active sessions for current user
  mySessions: [Session!]! @auth(requires: [MEMBER])
  
  # Get all permissions in the system (for admins)
  permissions: [Permission!]! @auth(requires: [ADMIN])
  
  # Get user by ID (for admins)
  user(id: ID!): User @auth(requires: [STAFF])
  
  # List users with filtering and pagination (for admins)
  users(
    search: String
    status: Status
    role: Role
    branchId: ID
    pagination: PaginationInput
  ): UserConnection! @auth(requires: [STAFF])
  
  # Validate password reset token
  validateResetToken(token: String!): Boolean!
  
  # Get MFA status
  mfaStatus: MFAStatusResponse! @auth(requires: [MEMBER])
}

type MFAStatusResponse {
  isEnabled: Boolean!
  methods: [MFAType!]
  recommendedMethods: [MFAType!]
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PaginationInfo!
}

type UserEdge {
  node: User!
  cursor: String!
}

extend type Mutation {
  # Register a new user
  register(input: RegisterInput!): AuthResponse!
  
  # Login with email and password
  login(input: LoginInput!): AuthResponse!
  
  # Login with a social provider
  socialLogin(provider: AuthProvider!, token: String!): AuthResponse!
  
  # Logout current session
  logout: Boolean!
  
  # Logout all sessions for the current user
  logoutAll: Boolean! @auth(requires: [MEMBER])
  
  # Logout a specific session
  logoutSession(sessionId: ID!): Boolean! @auth(requires: [MEMBER])
  
  # Refresh access token
  refreshToken(refreshToken: String!): AuthResponse!
  
  # Send password reset email
  requestPasswordReset(email: String!): VerificationResponse!
  
  # Reset password with token
  resetPassword(token: String!, newPassword: String!): AuthResponse!
  
  # Change password (when authenticated)
  changePassword(currentPassword: String!, newPassword: String!): Boolean! @auth(requires: [MEMBER])
  
  # Send email verification
  requestEmailVerification: VerificationResponse! @auth(requires: [GUEST])
  
  # Verify email with token
  verifyEmail(token: String!): AuthResponse!
  
  # Setup MFA
  setupMFA(type: MFAType!): MFASetupResponse! @auth(requires: [MEMBER])
  
  # Verify MFA setup
  verifyMFASetup(type: MFAType!, code: String!): Boolean! @auth(requires: [MEMBER])
  
  # Disable MFA
  disableMFA(type: MFAType!, password: String!): Boolean! @auth(requires: [MEMBER])
  
  # Verify MFA during login
  verifyMFA(sessionId: ID!, code: String!, type: MFAType!): AuthResponse!
  
  # Update user profile
  updateProfile(input: UpdateProfileInput!): User! @auth(requires: [MEMBER])
  
  # Update user (admin function)
  updateUser(id: ID!, input: UpdateUserInput!): User! @auth(requires: [BRANCH_ADMIN])
  
  # Create new user (admin function)
  createUser(input: CreateUserInput!): User! @auth(requires: [BRANCH_ADMIN])
  
  # Delete user (admin function)
  deleteUser(id: ID!): Boolean! @auth(requires: [ADMIN])
  
  # Request phone verification
  requestPhoneVerification(phone: String!): VerificationResponse! @auth(requires: [MEMBER])
  
  # Verify phone with code
  verifyPhone(code: String!): Boolean! @auth(requires: [MEMBER])
}

input RegisterInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String
  branchId: ID
  inviteToken: String
  acceptTerms: Boolean!
  authProvider: AuthProvider
  providerToken: String
}

input LoginInput {
  email: String!
  password: String!
  rememberMe: Boolean
}

input UpdateProfileInput {
  firstName: String
  lastName: String
  displayName: String
  avatar: Upload
  phone: String
  emailNotifications: Boolean
  smsNotifications: Boolean
  preferredLanguage: String
  customFields: JSON
  primaryBranchId: ID
}

input UpdateUserInput {
  firstName: String
  lastName: String
  displayName: String
  email: String
  phone: String
  avatar: Upload
  role: Role
  status: Status
  branchIds: [ID!]
  branchRoles: [BranchRoleInput!]
  permissions: [ID!]
  customFields: JSON
  primaryBranchId: ID
}

input BranchRoleInput {
  branchId: ID!
  role: BranchRole!
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String
  generatePassword: Boolean
  role: Role!
  phone: String
  status: Status
  branchIds: [ID!]
  branchRoles: [BranchRoleInput!]
  sendInvite: Boolean
  permissions: [ID!]
  customFields: JSON
  primaryBranchId: ID
}

extend type Subscription {
  # Get notified when a new login happens
  userLoggedIn: User! @auth(requires: [MEMBER])
  
  # Get notified when a session expires
  sessionExpired: Session! @auth(requires: [MEMBER])
}
