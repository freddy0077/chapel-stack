"""
Communication schema - handles email, SMS, notifications, and message management
"""

enum MessageType {
  EMAIL
  SMS
  PUSH_NOTIFICATION
  IN_APP_NOTIFICATION
  LETTER
  PHONE_CALL
}

enum MessageStatus {
  DRAFT
  SCHEDULED
  SENT
  DELIVERED
  FAILED
  CANCELLED
}

enum MessagePriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum CommunicationChannel {
  EMAIL
  SMS
  PUSH
  IN_APP
  WHATSAPP
  FACEBOOK
  TWITTER
  POSTAL
  OTHER
}

type Message {
  id: ID!
  subject: String!
  body: String!
  messageType: MessageType!
  template: Template
  status: MessageStatus!
  priority: MessagePriority!
  sentAt: DateTime
  scheduledFor: DateTime
  sender: User!
  recipients: [MessageRecipient!]!
  attachments: [Attachment!]
  branch: Branch
  ministry: Ministry
  campaign: MessageCampaign
  replyTo: String
  meta: JSON
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MessageRecipient {
  id: ID!
  message: Message!
  recipient: Member
  recipientEmail: String
  recipientPhone: String
  recipientName: String
  status: MessageStatus!
  deliveredAt: DateTime
  openedAt: DateTime
  clickedAt: DateTime
  failureReason: String
  meta: JSON
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Attachment {
  id: ID!
  filename: String!
  fileUrl: String!
  fileSize: Int!
  fileType: String!
  message: Message!
  createdAt: DateTime!
}

type Template {
  id: ID!
  name: String!
  description: String
  subject: String!
  body: String!
  messageType: MessageType!
  category: String!
  variables: [String!]!
  isActive: Boolean!
  branch: Branch
  createdBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MessageCampaign {
  id: ID!
  name: String!
  description: String
  startDate: DateTime!
  endDate: DateTime
  status: Status!
  messages: [Message!]!
  recipientCount: Int!
  deliveryCount: Int!
  openCount: Int!
  clickCount: Int!
  bounceCount: Int!
  targetAudience: TargetAudience
  branch: Branch
  createdBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TargetAudience {
  id: ID!
  name: String!
  description: String
  filterCriteria: JSON!
  estimatedReach: Int
  lastUsed: DateTime
  createdBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type NotificationPreference {
  id: ID!
  member: Member!
  channel: CommunicationChannel!
  category: String!
  isEnabled: Boolean!
  updatedAt: DateTime!
}

type NotificationSettings {
  id: ID!
  member: Member!
  emailEnabled: Boolean!
  smsEnabled: Boolean!
  pushEnabled: Boolean!
  inAppEnabled: Boolean!
  emailAddress: String
  phoneNumber: String
  deviceTokens: [String!]
  preferences: [NotificationPreference!]!
  unsubscribeToken: String!
  updatedAt: DateTime!
}

type Notification {
  id: ID!
  title: String!
  body: String!
  type: String!
  priority: MessagePriority!
  recipient: Member!
  isRead: Boolean!
  action: String
  actionData: JSON
  sentAt: DateTime!
  readAt: DateTime
  expiresAt: DateTime
  createdAt: DateTime!
}

extend type Query {
  # Get messages with filtering
  messages(
    search: String
    messageType: MessageType
    status: MessageStatus
    dateRange: DateRangeInput
    senderId: ID
    branchId: ID
    ministryId: ID
    campaignId: ID
    pagination: PaginationInput
  ): MessageConnection! @auth(requires: [STAFF])
  
  # Get a specific message
  message(id: ID!): Message @auth(requires: [STAFF])
  
  # Get all templates
  templates(
    messageType: MessageType
    category: String
    search: String
    branchId: ID
    isActive: Boolean
    pagination: PaginationInput
  ): TemplateConnection! @auth(requires: [STAFF])
  
  # Get a specific template
  template(id: ID!): Template @auth(requires: [STAFF])
  
  # Get all message campaigns
  messageCampaigns(
    status: Status
    dateRange: DateRangeInput
    branchId: ID
    pagination: PaginationInput
  ): MessageCampaignConnection! @auth(requires: [STAFF])
  
  # Get a specific message campaign
  messageCampaign(id: ID!): MessageCampaign @auth(requires: [STAFF])
  
  # Get all target audiences
  targetAudiences(
    search: String
    pagination: PaginationInput
  ): TargetAudienceConnection! @auth(requires: [STAFF])
  
  # Get a specific target audience
  targetAudience(id: ID!): TargetAudience @auth(requires: [STAFF])
  
  # Get member notification settings
  notificationSettings(memberId: ID!): NotificationSettings! @auth(requires: [STAFF])
  
  # Get my notification settings (for authenticated members)
  myNotificationSettings: NotificationSettings! @auth(requires: [MEMBER])
  
  # Get member notifications
  memberNotifications(
    memberId: ID!
    isRead: Boolean
    pagination: PaginationInput
  ): NotificationConnection! @auth(requires: [STAFF])
  
  # Get my notifications (for authenticated members)
  myNotifications(
    isRead: Boolean
    pagination: PaginationInput
  ): NotificationConnection! @auth(requires: [MEMBER])
  
  # Get unread notification count for a member
  unreadNotificationCount(memberId: ID!): Int! @auth(requires: [STAFF])
  
  # Get my unread notification count (for authenticated members)
  myUnreadNotificationCount: Int! @auth(requires: [MEMBER])
  
  # Preview a message with template and variables
  previewMessage(
    templateId: ID!
    variables: JSON!
  ): String! @auth(requires: [STAFF])
  
  # Test messaging configuration
  testMessagingConfiguration(
    channel: CommunicationChannel!
    recipient: String!
  ): Boolean! @auth(requires: [ADMIN])
  
  # Calculate estimated audience size
  calculateAudienceSize(filterCriteria: JSON!): Int! @auth(requires: [STAFF])
}

type MessageConnection {
  edges: [MessageEdge!]!
  pageInfo: PaginationInfo!
}

type MessageEdge {
  node: Message!
  cursor: String!
}

type TemplateConnection {
  edges: [TemplateEdge!]!
  pageInfo: PaginationInfo!
}

type TemplateEdge {
  node: Template!
  cursor: String!
}

type MessageCampaignConnection {
  edges: [MessageCampaignEdge!]!
  pageInfo: PaginationInfo!
}

type MessageCampaignEdge {
  node: MessageCampaign!
  cursor: String!
}

type TargetAudienceConnection {
  edges: [TargetAudienceEdge!]!
  pageInfo: PaginationInfo!
}

type TargetAudienceEdge {
  node: TargetAudience!
  cursor: String!
}

type NotificationConnection {
  edges: [NotificationEdge!]!
  pageInfo: PaginationInfo!
}

type NotificationEdge {
  node: Notification!
  cursor: String!
}

extend type Mutation {
  # Send a message
  sendMessage(input: SendMessageInput!): Message! @auth(requires: [STAFF])
  
  # Schedule a message
  scheduleMessage(input: ScheduleMessageInput!): Message! @auth(requires: [STAFF])
  
  # Cancel a scheduled message
  cancelScheduledMessage(id: ID!): Message! @auth(requires: [STAFF])
  
  # Create a draft message
  createDraftMessage(input: CreateDraftMessageInput!): Message! @auth(requires: [STAFF])
  
  # Update a draft message
  updateDraftMessage(id: ID!, input: UpdateDraftMessageInput!): Message! @auth(requires: [STAFF])
  
  # Delete a draft message
  deleteDraftMessage(id: ID!): Boolean! @auth(requires: [STAFF])
  
  # Send a draft message
  sendDraftMessage(id: ID!, scheduledFor: DateTime): Message! @auth(requires: [STAFF])
  
  # Create a template
  createTemplate(input: CreateTemplateInput!): Template! @auth(requires: [STAFF])
  
  # Update a template
  updateTemplate(id: ID!, input: UpdateTemplateInput!): Template! @auth(requires: [STAFF])
  
  # Delete a template
  deleteTemplate(id: ID!): Boolean! @auth(requires: [STAFF])
  
  # Create a message campaign
  createMessageCampaign(input: CreateMessageCampaignInput!): MessageCampaign! @auth(requires: [STAFF])
  
  # Update a message campaign
  updateMessageCampaign(id: ID!, input: UpdateMessageCampaignInput!): MessageCampaign! @auth(requires: [STAFF])
  
  # Delete a message campaign
  deleteMessageCampaign(id: ID!): Boolean! @auth(requires: [STAFF])
  
  # Start a message campaign
  startMessageCampaign(id: ID!): MessageCampaign! @auth(requires: [STAFF])
  
  # Pause a message campaign
  pauseMessageCampaign(id: ID!): MessageCampaign! @auth(requires: [STAFF])
  
  # Stop a message campaign
  stopMessageCampaign(id: ID!): MessageCampaign! @auth(requires: [STAFF])
  
  # Create a target audience
  createTargetAudience(input: CreateTargetAudienceInput!): TargetAudience! @auth(requires: [STAFF])
  
  # Update a target audience
  updateTargetAudience(id: ID!, input: UpdateTargetAudienceInput!): TargetAudience! @auth(requires: [STAFF])
  
  # Delete a target audience
  deleteTargetAudience(id: ID!): Boolean! @auth(requires: [STAFF])
  
  # Update notification settings
  updateNotificationSettings(
    memberId: ID!,
    input: UpdateNotificationSettingsInput!
  ): NotificationSettings! @auth(requires: [STAFF])
  
  # Update my notification settings (for authenticated members)
  updateMyNotificationSettings(
    input: UpdateNotificationSettingsInput!
  ): NotificationSettings! @auth(requires: [MEMBER])
  
  # Send a notification
  sendNotification(input: SendNotificationInput!): Notification! @auth(requires: [STAFF])
  
  # Mark notification as read
  markNotificationAsRead(id: ID!): Notification! @auth(requires: [MEMBER])
  
  # Mark all notifications as read
  markAllNotificationsAsRead(memberId: ID!): Boolean! @auth(requires: [STAFF])
  
  # Mark my notifications as read (for authenticated members)
  markMyNotificationsAsRead: Boolean! @auth(requires: [MEMBER])
  
  # Delete a notification
  deleteNotification(id: ID!): Boolean! @auth(requires: [STAFF])
  
  # Send a bulk notification
  sendBulkNotification(input: SendBulkNotificationInput!): Int! @auth(requires: [STAFF])
}

input SendMessageInput {
  subject: String!
  body: String!
  messageType: MessageType!
  templateId: ID
  templateVariables: JSON
  priority: MessagePriority
  recipients: [RecipientInput!]!
  attachments: [Upload!]
  branchId: ID
  ministryId: ID
  replyTo: String
  meta: JSON
}

input RecipientInput {
  memberId: ID
  email: String
  phone: String
  name: String
}

input ScheduleMessageInput {
  subject: String!
  body: String!
  messageType: MessageType!
  templateId: ID
  templateVariables: JSON
  priority: MessagePriority
  recipients: [RecipientInput!]!
  scheduledFor: DateTime!
  attachments: [Upload!]
  branchId: ID
  ministryId: ID
  replyTo: String
  meta: JSON
}

input CreateDraftMessageInput {
  subject: String!
  body: String!
  messageType: MessageType!
  templateId: ID
  templateVariables: JSON
  priority: MessagePriority
  recipients: [RecipientInput!]
  attachments: [Upload!]
  branchId: ID
  ministryId: ID
  replyTo: String
  meta: JSON
}

input UpdateDraftMessageInput {
  subject: String
  body: String
  messageType: MessageType
  templateId: ID
  templateVariables: JSON
  priority: MessagePriority
  recipients: [RecipientInput!]
  attachments: [Upload!]
  branchId: ID
  ministryId: ID
  replyTo: String
  meta: JSON
}

input CreateTemplateInput {
  name: String!
  description: String
  subject: String!
  body: String!
  messageType: MessageType!
  category: String!
  variables: [String!]!
  isActive: Boolean!
  branchId: ID
}

input UpdateTemplateInput {
  name: String
  description: String
  subject: String
  body: String
  messageType: MessageType
  category: String
  variables: [String!]
  isActive: Boolean
  branchId: ID
}

input CreateMessageCampaignInput {
  name: String!
  description: String
  startDate: DateTime!
  endDate: DateTime
  targetAudienceId: ID
  filterCriteria: JSON
  messageTemplate: CreateTemplateInput!
  branchId: ID
}

input UpdateMessageCampaignInput {
  name: String
  description: String
  startDate: DateTime
  endDate: DateTime
  status: Status
  targetAudienceId: ID
  filterCriteria: JSON
}

input CreateTargetAudienceInput {
  name: String!
  description: String
  filterCriteria: JSON!
}

input UpdateTargetAudienceInput {
  name: String
  description: String
  filterCriteria: JSON
}

input UpdateNotificationSettingsInput {
  emailEnabled: Boolean
  smsEnabled: Boolean
  pushEnabled: Boolean
  inAppEnabled: Boolean
  emailAddress: String
  phoneNumber: String
  deviceToken: String
  preferences: [NotificationPreferenceInput!]
}

input NotificationPreferenceInput {
  channel: CommunicationChannel!
  category: String!
  isEnabled: Boolean!
}

input SendNotificationInput {
  title: String!
  body: String!
  type: String!
  priority: MessagePriority
  recipientId: ID!
  action: String
  actionData: JSON
  expiresAt: DateTime
}

input SendBulkNotificationInput {
  title: String!
  body: String!
  type: String!
  priority: MessagePriority
  recipientIds: [ID!]!
  targetAudienceId: ID
  filterCriteria: JSON
  action: String
  actionData: JSON
  expiresAt: DateTime
}

extend type Subscription {
  # Get notified when a new message is sent
  messageSent(branchId: ID): Message! @auth(requires: [STAFF])
  
  # Get notified when a new notification is received
  notificationReceived(memberId: ID!): Notification! @auth(requires: [MEMBER])
  
  # Get notified when a campaign status changes
  campaignStatusChanged(campaignId: ID!): MessageCampaign! @auth(requires: [STAFF])
}
